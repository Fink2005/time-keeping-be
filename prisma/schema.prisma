generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String? @db.VarChar(500)
  keycloakId   String  @unique
  phoneNumber  String? @db.VarChar(50)
  avatar       String? @db.VarChar(1000) //scalar type
  refreshToken String? @db.VarChar(1000) //scalar type

  status UserStatus @default(ACTIVE)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  attendances Attendance[] @relation("UserAttendance") // 1 user có nhiều bản ghi chấm công
  locations   Location[]   @relation("UserLocation") // 1 user có thể tạo nhiều địa điểm riêng

  @@index([deletedAt])
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255) // VD: Công ty A, Cửa hàng B
  lat       String
  lng       String
  address   String    @db.VarChar(500)
  radius    Int       @default(50) // bán kính check-in cho phép
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId Int
  user   User @relation("UserLocation", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  attendances Attendance[] @relation("LocationAttendance") // các chấm công tại địa điểm này 

  @@index([deletedAt])
}

model Attendance {
  id        Int              @id @default(autoincrement())
  lat       String
  lng       String
  address   String           @db.VarChar(500)
  createdAt DateTime         @default(now())
  type      AttendanceStatus
  note     String?          @db.VarChar(500)
  imageUri  String?
  userId    Int
  user      User             @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  Location   Location? @relation("LocationAttendance", fields: [locationId], references: [id], onDelete: SetNull)
  locationId Int?
  deletedAt  DateTime?

  @@index([deletedAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@index([expiresAt])
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AttendanceStatus {
  CHECK_IN
  CHECK_OUT
}
